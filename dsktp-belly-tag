
  $mod = Get-WmiObject Win32_ComputerSystem | % {$_.Model}
 # Start-Transcript -append -Path "_____"
 

#out-file E:\bellyTag.txt -encoding UTF8
Write-Host ' '
Write-Host "Belly Tagz -- *LapTop Edition!*" -foregroundcolor green
Write-Host "---------------------------------" -foregroundcolor green

  $ddr = Get-WmiObject Win32_PhysicalMemory | Select-Object SMBIOSMemoryType | % {$_.SMBIOSMemoryType}


  if ($ddr -eq 21) {
	$ddr = 'DDR2'
  } elseif ($ddr -eq 26) {
	$ddr = 'DDR4'
  }  elseif ($ddr -eq 22) {
	$ddr = 'DDR2 FB-DIMM'
  } elseif ($ddr -eq 24) {
	$ddr = 'DDR3'
  } elseif ($ddr -eq 20) {
	$ddr = 'DDR'
  }

Get-WmiObject Win32_ComputerSystem | ? {Write-Host $_.Model}
Get-WmiObject win32_baseboard | ? {Write-Host $_.Manufacturer $_.Product}
  
				#Get-WmiObject Win32_VideoController | ? {Write-Host ($ssFin)'" HD LCD Screen ('$_.CurrentHorizontalResolution 'x' $_.CurrentVerticalResolution')'}

  $cpuName = Get-WmiObject Win32_processor | % {$_.name}
  $cores = Get-WmiObject Win32_processor | % {$_.NumberOfCores}
  $threads = Get-WmiObject Win32_processor | % {$_.NumberOfLogicalProcessors}
  
Write-Host "$($cpuName) ($($cores) Cores $($threads) Threads)"

				#Get-wmiObject win32_processor | ? {Write-Host $_.name "|" $_.NumberOfCores "Cores" $_.NumberOfLogicalProcessors"Threads"}

  $memTotal = Get-WmiObject Win32_physicalMemory | % {($_.capacity/1gb)}
  $memSlots = Get-WmiObject Win32_physicalMemoryArray | % {$_.Memorydevices}
  $memFirst = $memTotal[0]

Write-Host "$($memTotal) GB $($ddr) ($($memFirst) GB x $($memSlots) Slots)"


				#Get-WmiObject Win32_PhysicalMemory | ? {Write-Host ($_.capacity/1gb) "GB" $ddr}
Get-WmiObject win32_videocontroller | ?  {Write-Host $_.Name}
  $stor = Get-WmiObject Win32_LogicalDisk | ? {$_.DeviceId -eq "C:"} | ForEach-Object {"{0:N0}" -f ($_.Size/1gb)}
  $dt = Get-PhysicalDisk | ForEach-Object { $_.MediaType }
  $dtFin = $dt[0]
Write-Host $stor "GB" $dtFin

Write-Host "Gigabit Ethernet"

  $Vers = get-Ciminstance Win32_OperatingSystem | % caption

  if ($Vers -eq "Microsoft Windows 10 Pro") {
	Write-Host "Windows 10 Pro"
  } elseif ($Vers -eq "Microsoft Windows 10 Home") {
	Write-host "Windows 10 Home"
  } else {
	  Start-Process winver
  }


Write-Host "---------------------------------" -foregroundcolor green
Write-Host "Continue for tech info..." -foregroundcolor green


pause

  $exec = Get-ExecutionPolicy

Write-Host 'Tech Info ~~' -foregroundcolor yellow
write-host "---------------------------------" -foregroundcolor yellow
Get-WmiObject Win32_BIOS | ? {Write-Host "Serial Number: "  $_.SerialNumber -foregroundcolor yellow}
Write-Host 'ExecutionPolicy is set to: '$exec  -foregroundcolor yellow
start-process devmgmt.msc
Write-Host 'Device manager is open' -foregroundcolor yellow
Write-Host "File Explorer Options is open to clear recent history" -foregroundcolor yellow
Write-Host "^^explorer is open to prove this +-- Testing purposes --+" -foregroundcolor yellow
Get-ControlPanelItem -Name "File Explorer Options" | Show-ControlPanelItem
start-process explorer.exe

Start-Process ms-settings:activation
Write-Host "Windows activation is open" -foregroundcolor yellow
Get-WmiObject win32_videocontroller | ?  {Write-Host $_.Description  -foregroundcolor yellow}
Write-Host '^^in case previous call was incorrect'  -foregroundcolor yellow
  $date = Get-Date
Write-Host "Date is: $date"  -foregroundcolor yellow
  
Stop-Transcript
Write-Host "~~ Press Enter to exit Powershell ~~" -foregroundcolor green

pause


<#

Lets put this away for awhile...

Write-Host 'Checking windows activation...'
 $act = Get-CimInstance SoftwareLicensingProduct -Filter "Name like 'Windows%'"  | ? {$_.PartialProductKey} | Select LicenseStatus

  if (!$act) {
	write-host "Windows is NOT activated."  -foregroundcolor yellow
  } elseif ($act) {
	write-host "Windows is activated!"  -foregroundcolor yellow
  } else {
	  Write-Host "Windows Activation servers could not be reached."  -foregroundcolor red
  }
#>
<#Get-WmiObject win32_videocontroller | ?  {Write-Host $_.Name} 
-- You have tried $_.Description with inconsistent results#>

